function [processedImages, mu, sigma] = backgroundSubtraction(zAveragedImages)
    % Initialize cell array to store processed images
    processedImages = cell(size(zAveragedImages));

    % Loop through each z-averaged image
    for i = 1:numel(zAveragedImages)
        % Get the current z-averaged image
        currentImage = zAveragedImages{i};

        % filtering
        %smoothedImage = medfilt2(currentImage, [5 5]);

        % Flatten the image into a column vector
        intensities = smoothenedImage(:);

        % Fit a normal distribution to the pixel intensities
        pd = fitdist(intensities, 'Normal');

        % Estimate mean and variance using percentiles
        lowerPercentile = 25;
        upperPercentile = 75;
        lowerThreshold = pd.icdf(lowerPercentile / 100);
        upperThreshold = pd.icdf(upperPercentile / 100);
        
        % Calculate IQR (Interquartile Range)
        IQR = upperThreshold - lowerThreshold;
        
        % Estimate standard deviation for a normal distribution
        sigma(i) = IQR / 1.349;
        
        % Calculate mean using the median (assuming symmetry in a normal distribution)
        mu(i) = (upperThreshold + lowerThreshold) / 2;

        % Filter out pixels with right-sided p-value below 3 sigma
        pThreshold = 0.05;
        pValues = 1 - cdf(pd, intensities);
        filteredPixels = currentImage(pValues < pThreshold);

        % Create a new image with filtered pixels
        processedImage = zeros(size(currentImage));
        processedImage(pValues < pThreshold) = filteredPixels;
        
        % Smooth the image
        smoothenedImage = medfilt2(processedImage, [5 5]);
        secondFilteredPixels = 

        outputImage = zeros(size(processedImage));
        


        
        % Store the processed image
        processedImages{i} = processedImage;
    end
end